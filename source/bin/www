#!/usr/bin/env node

/**
 * Module dependencies.
 */
 require('dotenv').config();
 const app   = require('../app');
 const https = require('https');
 const fs    = require('fs');
 const http = require('http');

 
 /**
  * Get port from environment and store in Express.
  */
 const port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTPS server.
  */
 
//  const SSL_OPTIONS = {
//    key: fs.readFileSync(process.env.SSL_SERVER_KEY),
//    cert: fs.readFileSync(process.env.SSL_CERTIFICATE),
//    ca: [fs.readFileSync(process.env.SSL_CERTIFICATE_AUTHORITY)],
//  };
//  const server = https.createServer(SSL_OPTIONS, app);
 const server = http.createServer(app);

 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

 /**
  * Listen on another port for unsecured channel HTTP
  */
//  app.listen(process.env.PORT_ALT, function() {
//    console.log('[HTTP ] Listening on port => ', process.env.PORT_ALT);
//  });

 /**
  * Listen to websocket connections
  */
//  const WebSocketServer = require('websocket').server;

//  const wsServer = new WebSocketServer({
//   httpServer: server
//  });

//  require('../socket')(wsServer);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   const port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   console.log('[HTTPS] Listening on ' + bind);
 }
 